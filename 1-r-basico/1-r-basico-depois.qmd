---
title: "R Básico"
format: html
editor: visual
---

## Variáveis

Atribuição:

```{r}
a <- 42
b <- 3.14
a * b
```

Também funciona, mas é estranho...

```{r}
a = 42
3.14 -> b
a * b
```

Strings

```{r}
c <- "olá"
d <- "mundo"
e <- paste(c, d)
e
```

Comentários e ajuda com funções:

```{r}
help(paste)
?paste  # ou F1 com cursor em cima da função
```

## Tipos de dados

```{r}
paste(
  '123', typeof(123),
  'TRUE', typeof(TRUE),
  'T', typeof(T),
  '123L', typeof(123L),
  'Teste', typeof('teste')
)
```

## Funções

Chamando funções (note: o ponto "." não tem significado sintático e pode ser utilizado em nomes de funções e variáveis):

```{r}
read.csv("teste.csv")
```

Definindo funções:

```{r}
soma.dois <- function(a, b) {
  a + b # retorna última linha
}

soma.dois <- function(a, b) a + b # uma linha não precisa de {}

soma.dois <- \(a, b) a + b # função não-nomeada (lambdas)

soma.dois(8, 9)
```

É possível definir operadores infixos:

```{r}
`%abs.diff%` <- function(a, b) abs(a - b)

3 %abs.diff% 5
```

O operador "pipe" serve para inserir o resultado de uma experessão como primeiro argumento da função (encadeamento):

```{r}
3 |> soma.dois(5) |> soma.dois(-2)
```

## Estrutura de dados

### Vetores

Todos os dados do mesmo tipo (\~ np.array)

```{r}
numeros <- c(2, 5, 8)
numeros
```

Indexando vetores (começando por 1!):

```{r}
numeros[1]
```

```{r}
numeros[1:2]
```

Índices negativos removem o elemento do índice

```{r}
numeros[c(-1, -2)]
```

Broadcast por padrão:

```{r}
numeros * 2
```

```{r}
134 == c(134)
```

```{r}
2:10
```

```{r}
mais_numeros <- matrix(1:10, nrow = 2, byrow = T)
mais_numeros
```

```{r}
mais_numeros[2, 3]
```

```{r}
mais_numeros[,2]
```

### Listas

Dados com tipos diferentes (\~ dict, objetos em python)

```{r}
pessoa = list(nome = 'João', idade = 32)
pessoa
```

```{r}
pessoa$nome
```

### Data frames

```{r}
dados <- data.frame(
  a = c(1, 2),
  b = c('x', 'y')
)
dados
```

```{r}
dados$a
```

```{r}
dados["a"]
```

```{r}
dados[["a"]]
```

```{r}
dados[1,]
```

```{r}
as.list(dados[1,])$b
```
